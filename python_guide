# 1. Basic Syntax and Data Types
name = "Alice" # String
age = 30 # Integer
height = 5.7 # Float
is_adult = True # Boolean

# 2. Conditionals
if age >= 18:
    print("Adult")
elif age > 12:
    print("Teenager")
else:
    print("Child")

# 3. Loops
# For loop
for i in range(5):
    print(i)

# While loop
counter = 0
while counter < 5:
    print(counter)
    counter += 1

# 4. Functions
def greet(name):
    return f"Hello, {name}"

print(greet("Alice"))

# 5. Lists (Arrays)
my_list = [1, 2, 3, 4, 5]
my_list.append(6) # Add element
my_list[0] = 10 # Modify element
print(my_list)

# List comprehensions
squares = [x ** 2 for x in range(10)]
print(squares)

# 6. Dictionaries (HashMaps)
my_dict = {"name": "Alice", "age": 30}
print(my_dict["name"]) # Access element
my_dict["height"] = 5.7 # Add new key-value pair

# 7. Classes and Objects
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def greet(self):
        return f"Hello, my name is {self.name}"

p = Person("Alice", 30)
print(p.greet())

# 8. File I/O
# Write to file
with open("test.txt", "w") as f:
    f.write("Hello, World!")

# Read from file
with open("test.txt", "r") as f:
    print(f.read())

# 9. Exception Handling
try:
    x = 1 / 0
except ZeroDivisionError:
    print("Cannot divide by zero!")

# 10. Generators
def my_generator():
    for i in range(5):
        yield i

gen = my_generator()
for val in gen:
    print(val)

# 11. Lambda Functions
add = lambda x, y: x + y
print(add(10, 5))

# 12. Decorators
def decorator_function(func):
    def wrapper():
        print("Before function call")
        func()
        print("After function call")
    return wrapper

@decorator_function
def say_hello():
    print("Hello!")

say_hello()

# 13. Modules and Packages
import math
print(math.sqrt(16))

# Custom module
import my_module # Assume my_module.py exists
my_module.my_function()

# 14. Working with JSON
import json

data = {
    "name": "Alice",
    "age": 30
}

json_string = json.dumps(data) # Serialize to JSON string
print(json_string)

parsed_data = json.loads(json_string) # Deserialize back to Python object
print(parsed_data)

# 15.  Multi-threading and Concurrency
import threading

def thread_function(name):
    print(f"Thread {name}")

threads = []
for i in range(5):
    t = threading.Thread(target=thread_function, args=(i,))
    threads.append(t)
    t.start()

# 16. Asyncio for Asynchronous Programming
import asyncio

async def my_coroutine():
    print("Hello")
    await asyncio.sleep(1)
    print("World")

asyncio.run(my_coroutine())

# 17. List Manipulation with Map, Filter, and Reduce
from functools import reduce

nums = [1, 2, 3, 4, 5]

# Map
squares = list(map(lambda x: x**2, nums))
print(squares)

# Filter
even_nums = list(filter(lambda x: x % 2 == 0, nums))
print(even_nums)

# Reduce
sum_of_nums = reduce(lambda x, y: x + y, nums)
print(sum_of_nums)
